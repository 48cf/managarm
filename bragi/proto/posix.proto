
syntax = "proto2";
option optimize_for = LITE_RUNTIME;

package managarm.posix;

enum Errors {
	SUCCESS = 0;
	DEAD_FORK = 6;
	ILLEGAL_REQUEST = 4;
	ILLEGAL_ARGUMENTS = 9;
	FILE_NOT_FOUND = 1;
	ACCESS_DENIED = 2;
	ALREADY_EXISTS = 3;
	NO_SUCH_FD = 5;
	END_OF_FILE = 7;
	BAD_FD = 8;
	WOULD_BLOCK = 10;
}

enum CntReqType {
	INIT = 7;
	GET_PID = 17;
	FORK = 8;
	EXEC = 1;
	VM_MAP = 26;
	VM_REMAP = 43;
	VM_UNMAP = 27;

	MOUNT = 21;
	CHROOT = 24;
	ACCESS = 20;
	MKDIR = 46;
	SYMLINK = 47;
	RENAME = 51;
	STAT = 23;
	LSTAT = 53;
	FSTAT = 12;
	READLINK = 31;
	OPEN = 2;
	READ = 3;
	WRITE = 4;
	SEEK_ABS = 13;
	SEEK_REL = 14;
	SEEK_EOF = 15;
	MMAP = 16;
	CLOSE = 5;
	DUP = 34;
	DUP2 = 6;
	IS_TTY = 22;
	TTY_NAME = 18;
	UNLINK = 40;
	FD_GET_FLAGS = 44;
	FD_SET_FLAGS = 45;

	// FIFO- and pipe-specific calls.
	PIPE_CREATE = 52;

	// Socket-specific calls.
	SOCKET = 35;
	SOCKPAIR = 25;
	ACCEPT = 19;
	RECVMSG = 41;
	SENDMSG = 42;
	
	// epoll-specific calls.
	EPOLL_CALL = 54;
	EPOLL_CREATE = 28;
	EPOLL_ADD = 37;
	EPOLL_MODIFY = 38;
	EPOLL_DELETE = 39;
	EPOLL_WAIT = 30;

	// signalfd()-specific calls
	SIGNALFD_CREATE = 32;

	TIMERFD_CREATE = 33;
	TIMERFD_SETTIME = 36;

	// inotify()-specific calls
	INOTIFY_CREATE = 48;
	INOTIFY_ADD = 49;
	INOTIFY_DELETE = 50;

	HELFD_ATTACH = 10;
	HELFD_CLONE = 11;
};

enum OpenMode {
	REGULAR = 1;
	HELFD = 2;
};

enum FileType {
	FT_UNKNOWN = 0;
	FT_REGULAR = 1;
	FT_DIRECTORY = 2;
	FT_SYMLINK = 3;
	FT_FIFO = 4;
	FT_SOCKET = 5;
	FT_CHAR_DEVICE = 6;
	FT_BLOCK_DEVICE = 7;
};

enum OpenFlags {
	OF_CREATE = 1;
	OF_EXCLUSIVE = 2;
	OF_NONBLOCK = 4;
	OF_CLOEXEC = 256;
};

message CntRequest {
	optional CntReqType request_type = 1;
	
	// used by INIT, EXEC and OPEN
	optional string path = 2;

	// used by MOUNT
	optional string target_path = 12;
	optional string fs_type = 13;

	// used by OPEN
	optional int32 flags = 3;
	optional int32 mode = 10;

	// used by READ, WRITE, SEEK_REL, SEEK_ABS, SEEK_END, MMAP, CLOSE, DUP2,
	// HELFD_ATTACH, HELFD_CLONE
	optional int32 fd = 4;

	// used by DUP2
	optional int32 newfd = 7;

	// used by READ
	optional uint32 size = 5;

	// used by WRITE
	optional bytes buffer = 6;

	// used by SEEK_ABS, SEEK_REL
	optional int64 rel_offset = 11;

	// used by FORK
	optional uint64 child_sp = 8;
	optional uint64 child_ip = 9;
	
	optional uint64 address = 24;
	optional uint32 new_size = 23;

	// used by socket functions
	optional int32 domain = 14;
	optional int32 socktype = 15;
	optional int32 protocol = 16;
	
	optional uint64 addr_size = 26;
	optional uint64 ctrl_size = 27;
	
	repeated int32 fds = 22;
	repeated int32 events = 28;
	
	// used by EPOLL_CTL
	optional uint64 cookie = 17;

	// used by EPOLL_WAIT
	optional int64 timeout = 25;

	optional uint64 time_secs = 18;
	optional uint64 time_nanos = 19;
	
	optional uint64 interval_secs = 20;
	optional uint64 interval_nanos = 21;
}

message SvrResponse {
	optional int32 error = 3;

	optional int64 size = 21;

	optional int64 flags = 24;

	// returned by GET_PID
	optional int64 pid = 18;

	// returned by FSTAT
	optional FileType file_type = 5;

	// returned by FSTAT
	optional uint64 file_size = 4;
	
	// returned by FSTAT
	optional int32 mode = 13;
	
	// returned by FSTAT
	optional uint64 fs_devnum = 22;
	optional uint64 fs_inode = 14;

	optional uint64 ref_devnum = 23;

	// returned by FSTAT
	optional uint64 num_links = 17;
	
	// returned by FSTAT
	optional int64 uid = 15;
	optional int64 gid = 16;

	// returned by FSTAT
	optional int64 atime_secs = 7;
	optional int64 atime_nanos = 8;
	optional int64 mtime_secs = 9;
	optional int64 mtime_nanos = 10;
	optional int64 ctime_secs = 11;
	optional int64 ctime_nanos = 12;

	// return of OPEN
	optional int32 fd = 1;

	// returned by SEEK_ABS, SEEK_REL
	optional uint64 offset = 6;

	// returned by TTY_NAME
	optional string path = 19;
	
	repeated int32 fds = 20;
	repeated int32 events = 25;
}

