// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: keyboard.proto

#ifndef PROTOBUF_keyboard_2eproto__INCLUDED
#define PROTOBUF_keyboard_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)

namespace managarm {
namespace keyboard {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_keyboard_2eproto();
void protobuf_AssignDesc_keyboard_2eproto();
void protobuf_ShutdownFile_keyboard_2eproto();

class ServerReq;

enum ServerReq_Action {
  ServerReq_Action_ACTION_KEY_DOWN = 1,
  ServerReq_Action_ACTION_KEY_PRESS = 2,
  ServerReq_Action_ACTION_KEY_UP = 3
};
bool ServerReq_Action_IsValid(int value);
const ServerReq_Action ServerReq_Action_Action_MIN = ServerReq_Action_ACTION_KEY_DOWN;
const ServerReq_Action ServerReq_Action_Action_MAX = ServerReq_Action_ACTION_KEY_UP;
const int ServerReq_Action_Action_ARRAYSIZE = ServerReq_Action_Action_MAX + 1;

enum Key {
  KEY_A = 1,
  KEY_B = 2,
  KEY_C = 3,
  KEY_D = 4,
  KEY_E = 5,
  KEY_F = 6,
  KEY_G = 7,
  KEY_H = 8,
  KEY_I = 9,
  KEY_J = 10,
  KEY_K = 11,
  KEY_L = 12,
  KEY_M = 13,
  KEY_N = 14,
  KEY_O = 15,
  KEY_P = 16,
  KEY_Q = 17,
  KEY_R = 18,
  KEY_S = 19,
  KEY_T = 20,
  KEY_U = 21,
  KEY_V = 22,
  KEY_W = 23,
  KEY_X = 24,
  KEY_Y = 25,
  KEY_Z = 26,
  KEY_0 = 30,
  KEY_1 = 31,
  KEY_2 = 32,
  KEY_3 = 33,
  KEY_4 = 34,
  KEY_5 = 35,
  KEY_6 = 36,
  KEY_7 = 37,
  KEY_8 = 38,
  KEY_9 = 39
};
bool Key_IsValid(int value);
const Key Key_MIN = KEY_A;
const Key Key_MAX = KEY_9;
const int Key_ARRAYSIZE = Key_MAX + 1;

// ===================================================================

class ServerReq : public ::google::protobuf::MessageLite {
 public:
  ServerReq();
  virtual ~ServerReq();

  ServerReq(const ServerReq& from);

  inline ServerReq& operator=(const ServerReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::std::string* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ServerReq& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ServerReq* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ServerReq* other);

  // implements Message ----------------------------------------------

  inline ServerReq* New() const { return New(NULL); }

  ServerReq* New(::google::protobuf::Arena* arena) const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ServerReq& from);
  void MergeFrom(const ServerReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  void DiscardUnknownFields();
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServerReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _arena_ptr_;
  }
  inline ::google::protobuf::Arena* MaybeArenaPtr() const {
    return _arena_ptr_;
  }
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef ServerReq_Action Action;
  static const Action ACTION_KEY_DOWN = ServerReq_Action_ACTION_KEY_DOWN;
  static const Action ACTION_KEY_PRESS = ServerReq_Action_ACTION_KEY_PRESS;
  static const Action ACTION_KEY_UP = ServerReq_Action_ACTION_KEY_UP;
  static inline bool Action_IsValid(int value) {
    return ServerReq_Action_IsValid(value);
  }
  static const Action Action_MIN =
    ServerReq_Action_Action_MIN;
  static const Action Action_MAX =
    ServerReq_Action_Action_MAX;
  static const int Action_ARRAYSIZE =
    ServerReq_Action_Action_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional .managarm.keyboard.ServerReq.Action action = 1;
  bool has_action() const;
  void clear_action();
  static const int kActionFieldNumber = 1;
  ::managarm::keyboard::ServerReq_Action action() const;
  void set_action(::managarm::keyboard::ServerReq_Action value);

  // optional .managarm.keyboard.Key key = 2;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  ::managarm::keyboard::Key key() const;
  void set_key(::managarm::keyboard::Key value);

  // optional bool shift = 10;
  bool has_shift() const;
  void clear_shift();
  static const int kShiftFieldNumber = 10;
  bool shift() const;
  void set_shift(bool value);

  // optional bool ctrl = 11;
  bool has_ctrl() const;
  void clear_ctrl();
  static const int kCtrlFieldNumber = 11;
  bool ctrl() const;
  void set_ctrl(bool value);

  // optional bool alt = 12;
  bool has_alt() const;
  void clear_alt();
  static const int kAltFieldNumber = 12;
  bool alt() const;
  void set_alt(bool value);

  // optional bool alt_gr = 13;
  bool has_alt_gr() const;
  void clear_alt_gr();
  static const int kAltGrFieldNumber = 13;
  bool alt_gr() const;
  void set_alt_gr(bool value);

  // optional bool meta = 14;
  bool has_meta() const;
  void clear_meta();
  static const int kMetaFieldNumber = 14;
  bool meta() const;
  void set_meta(bool value);

  // @@protoc_insertion_point(class_scope:managarm.keyboard.ServerReq)
 private:
  inline void set_has_action();
  inline void clear_has_action();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_shift();
  inline void clear_has_shift();
  inline void set_has_ctrl();
  inline void clear_has_ctrl();
  inline void set_has_alt();
  inline void clear_has_alt();
  inline void set_has_alt_gr();
  inline void clear_has_alt_gr();
  inline void set_has_meta();
  inline void clear_has_meta();

  ::std::string _unknown_fields_;
  ::google::protobuf::Arena* _arena_ptr_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int action_;
  int key_;
  bool shift_;
  bool ctrl_;
  bool alt_;
  bool alt_gr_;
  bool meta_;
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_keyboard_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_keyboard_2eproto();
  #endif
  friend void protobuf_AssignDesc_keyboard_2eproto();
  friend void protobuf_ShutdownFile_keyboard_2eproto();

  void InitAsDefaultInstance();
  static ServerReq* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerReq

// optional .managarm.keyboard.ServerReq.Action action = 1;
inline bool ServerReq::has_action() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerReq::set_has_action() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerReq::clear_has_action() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerReq::clear_action() {
  action_ = 1;
  clear_has_action();
}
inline ::managarm::keyboard::ServerReq_Action ServerReq::action() const {
  // @@protoc_insertion_point(field_get:managarm.keyboard.ServerReq.action)
  return static_cast< ::managarm::keyboard::ServerReq_Action >(action_);
}
inline void ServerReq::set_action(::managarm::keyboard::ServerReq_Action value) {
  assert(::managarm::keyboard::ServerReq_Action_IsValid(value));
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:managarm.keyboard.ServerReq.action)
}

// optional .managarm.keyboard.Key key = 2;
inline bool ServerReq::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerReq::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerReq::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerReq::clear_key() {
  key_ = 1;
  clear_has_key();
}
inline ::managarm::keyboard::Key ServerReq::key() const {
  // @@protoc_insertion_point(field_get:managarm.keyboard.ServerReq.key)
  return static_cast< ::managarm::keyboard::Key >(key_);
}
inline void ServerReq::set_key(::managarm::keyboard::Key value) {
  assert(::managarm::keyboard::Key_IsValid(value));
  set_has_key();
  key_ = value;
  // @@protoc_insertion_point(field_set:managarm.keyboard.ServerReq.key)
}

// optional bool shift = 10;
inline bool ServerReq::has_shift() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerReq::set_has_shift() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerReq::clear_has_shift() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerReq::clear_shift() {
  shift_ = false;
  clear_has_shift();
}
inline bool ServerReq::shift() const {
  // @@protoc_insertion_point(field_get:managarm.keyboard.ServerReq.shift)
  return shift_;
}
inline void ServerReq::set_shift(bool value) {
  set_has_shift();
  shift_ = value;
  // @@protoc_insertion_point(field_set:managarm.keyboard.ServerReq.shift)
}

// optional bool ctrl = 11;
inline bool ServerReq::has_ctrl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServerReq::set_has_ctrl() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServerReq::clear_has_ctrl() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServerReq::clear_ctrl() {
  ctrl_ = false;
  clear_has_ctrl();
}
inline bool ServerReq::ctrl() const {
  // @@protoc_insertion_point(field_get:managarm.keyboard.ServerReq.ctrl)
  return ctrl_;
}
inline void ServerReq::set_ctrl(bool value) {
  set_has_ctrl();
  ctrl_ = value;
  // @@protoc_insertion_point(field_set:managarm.keyboard.ServerReq.ctrl)
}

// optional bool alt = 12;
inline bool ServerReq::has_alt() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ServerReq::set_has_alt() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ServerReq::clear_has_alt() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ServerReq::clear_alt() {
  alt_ = false;
  clear_has_alt();
}
inline bool ServerReq::alt() const {
  // @@protoc_insertion_point(field_get:managarm.keyboard.ServerReq.alt)
  return alt_;
}
inline void ServerReq::set_alt(bool value) {
  set_has_alt();
  alt_ = value;
  // @@protoc_insertion_point(field_set:managarm.keyboard.ServerReq.alt)
}

// optional bool alt_gr = 13;
inline bool ServerReq::has_alt_gr() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ServerReq::set_has_alt_gr() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ServerReq::clear_has_alt_gr() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ServerReq::clear_alt_gr() {
  alt_gr_ = false;
  clear_has_alt_gr();
}
inline bool ServerReq::alt_gr() const {
  // @@protoc_insertion_point(field_get:managarm.keyboard.ServerReq.alt_gr)
  return alt_gr_;
}
inline void ServerReq::set_alt_gr(bool value) {
  set_has_alt_gr();
  alt_gr_ = value;
  // @@protoc_insertion_point(field_set:managarm.keyboard.ServerReq.alt_gr)
}

// optional bool meta = 14;
inline bool ServerReq::has_meta() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ServerReq::set_has_meta() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ServerReq::clear_has_meta() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ServerReq::clear_meta() {
  meta_ = false;
  clear_has_meta();
}
inline bool ServerReq::meta() const {
  // @@protoc_insertion_point(field_get:managarm.keyboard.ServerReq.meta)
  return meta_;
}
inline void ServerReq::set_meta(bool value) {
  set_has_meta();
  meta_ = value;
  // @@protoc_insertion_point(field_set:managarm.keyboard.ServerReq.meta)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace keyboard
}  // namespace managarm

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::managarm::keyboard::ServerReq_Action> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::managarm::keyboard::Key> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_keyboard_2eproto__INCLUDED
