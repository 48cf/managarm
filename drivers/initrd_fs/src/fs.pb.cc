// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fs.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "fs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace managarm {
namespace fs {

void protobuf_ShutdownFile_fs_2eproto() {
  delete ClientRequest::default_instance_;
  delete ServerResponse::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_fs_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_fs_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ClientRequest::default_instance_ = new ClientRequest();
  ServerResponse::default_instance_ = new ServerResponse();
  ClientRequest::default_instance_->InitAsDefaultInstance();
  ServerResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_fs_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_fs_2eproto_once_);
void protobuf_AddDesc_fs_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_fs_2eproto_once_,
                 &protobuf_AddDesc_fs_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_fs_2eproto {
  StaticDescriptorInitializer_fs_2eproto() {
    protobuf_AddDesc_fs_2eproto();
  }
} static_descriptor_initializer_fs_2eproto_;
#endif
bool Errors_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

bool ClientRequest_RequestType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ClientRequest_RequestType ClientRequest::OPEN;
const ClientRequest_RequestType ClientRequest::READ;
const ClientRequest_RequestType ClientRequest::WRITE;
const ClientRequest_RequestType ClientRequest::CLOSE;
const ClientRequest_RequestType ClientRequest::RequestType_MIN;
const ClientRequest_RequestType ClientRequest::RequestType_MAX;
const int ClientRequest::RequestType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ClientRequest::kRequestTypeFieldNumber;
const int ClientRequest::kErrorFieldNumber;
const int ClientRequest::kFilenameFieldNumber;
const int ClientRequest::kFlagsFieldNumber;
const int ClientRequest::kFdFieldNumber;
const int ClientRequest::kSizeFieldNumber;
const int ClientRequest::kBufferFieldNumber;
#endif  // !_MSC_VER

ClientRequest::ClientRequest()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:managarm.fs.ClientRequest)
}

void ClientRequest::InitAsDefaultInstance() {
}

ClientRequest::ClientRequest(const ClientRequest& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:managarm.fs.ClientRequest)
}

void ClientRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  request_type_ = 1;
  error_ = 0;
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flags_ = 0;
  fd_ = 0;
  size_ = 0;
  buffer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientRequest::~ClientRequest() {
  // @@protoc_insertion_point(destructor:managarm.fs.ClientRequest)
  SharedDtor();
}

void ClientRequest::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buffer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ClientRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClientRequest& ClientRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fs_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fs_2eproto();
#endif
  return *default_instance_;
}

ClientRequest* ClientRequest::default_instance_ = NULL;

ClientRequest* ClientRequest::New(::google::protobuf::Arena* arena) const {
  ClientRequest* n = new ClientRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClientRequest::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ClientRequest*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(flags_, fd_);
    request_type_ = 1;
    error_ = 0;
    if (has_filename()) {
      filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    size_ = 0;
    if (has_buffer()) {
      buffer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ClientRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:managarm.fs.ClientRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .managarm.fs.ClientRequest.RequestType request_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::managarm::fs::ClientRequest_RequestType_IsValid(value)) {
            set_request_type(static_cast< ::managarm::fs::ClientRequest_RequestType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_filename;
        break;
      }

      // optional string filename = 2;
      case 2: {
        if (tag == 18) {
         parse_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_flags;
        break;
      }

      // optional int32 flags = 3;
      case 3: {
        if (tag == 24) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_fd;
        break;
      }

      // optional int32 fd = 4;
      case 4: {
        if (tag == 32) {
         parse_fd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fd_)));
          set_has_fd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_size;
        break;
      }

      // optional int32 size = 5;
      case 5: {
        if (tag == 40) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_buffer;
        break;
      }

      // optional bytes buffer = 6;
      case 6: {
        if (tag == 50) {
         parse_buffer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_buffer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_error;
        break;
      }

      // optional int32 error = 7;
      case 7: {
        if (tag == 56) {
         parse_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:managarm.fs.ClientRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:managarm.fs.ClientRequest)
  return false;
#undef DO_
}

void ClientRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:managarm.fs.ClientRequest)
  // optional .managarm.fs.ClientRequest.RequestType request_type = 1;
  if (has_request_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->request_type(), output);
  }

  // optional string filename = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filename(), output);
  }

  // optional int32 flags = 3;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->flags(), output);
  }

  // optional int32 fd = 4;
  if (has_fd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->fd(), output);
  }

  // optional int32 size = 5;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->size(), output);
  }

  // optional bytes buffer = 6;
  if (has_buffer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->buffer(), output);
  }

  // optional int32 error = 7;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->error(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:managarm.fs.ClientRequest)
}

int ClientRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 127u) {
    // optional .managarm.fs.ClientRequest.RequestType request_type = 1;
    if (has_request_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->request_type());
    }

    // optional int32 error = 7;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }

    // optional string filename = 2;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional int32 flags = 3;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flags());
    }

    // optional int32 fd = 4;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fd());
    }

    // optional int32 size = 5;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // optional bytes buffer = 6;
    if (has_buffer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->buffer());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClientRequest*>(&from));
}

void ClientRequest::MergeFrom(const ClientRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_type()) {
      set_request_type(from.request_type());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_filename()) {
      set_has_filename();
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_fd()) {
      set_fd(from.fd());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_buffer()) {
      set_has_buffer();
      buffer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buffer_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ClientRequest::CopyFrom(const ClientRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientRequest::IsInitialized() const {

  return true;
}

void ClientRequest::Swap(ClientRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientRequest::InternalSwap(ClientRequest* other) {
  std::swap(request_type_, other->request_type_);
  std::swap(error_, other->error_);
  filename_.Swap(&other->filename_);
  std::swap(flags_, other->flags_);
  std::swap(fd_, other->fd_);
  std::swap(size_, other->size_);
  buffer_.Swap(&other->buffer_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.swap(other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ClientRequest::GetTypeName() const {
  return "managarm.fs.ClientRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientRequest

// optional .managarm.fs.ClientRequest.RequestType request_type = 1;
bool ClientRequest::has_request_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ClientRequest::set_has_request_type() {
  _has_bits_[0] |= 0x00000001u;
}
void ClientRequest::clear_has_request_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void ClientRequest::clear_request_type() {
  request_type_ = 1;
  clear_has_request_type();
}
 ::managarm::fs::ClientRequest_RequestType ClientRequest::request_type() const {
  // @@protoc_insertion_point(field_get:managarm.fs.ClientRequest.request_type)
  return static_cast< ::managarm::fs::ClientRequest_RequestType >(request_type_);
}
 void ClientRequest::set_request_type(::managarm::fs::ClientRequest_RequestType value) {
  assert(::managarm::fs::ClientRequest_RequestType_IsValid(value));
  set_has_request_type();
  request_type_ = value;
  // @@protoc_insertion_point(field_set:managarm.fs.ClientRequest.request_type)
}

// optional int32 error = 7;
bool ClientRequest::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ClientRequest::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
void ClientRequest::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
void ClientRequest::clear_error() {
  error_ = 0;
  clear_has_error();
}
 ::google::protobuf::int32 ClientRequest::error() const {
  // @@protoc_insertion_point(field_get:managarm.fs.ClientRequest.error)
  return error_;
}
 void ClientRequest::set_error(::google::protobuf::int32 value) {
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:managarm.fs.ClientRequest.error)
}

// optional string filename = 2;
bool ClientRequest::has_filename() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ClientRequest::set_has_filename() {
  _has_bits_[0] |= 0x00000004u;
}
void ClientRequest::clear_has_filename() {
  _has_bits_[0] &= ~0x00000004u;
}
void ClientRequest::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filename();
}
 const ::std::string& ClientRequest::filename() const {
  // @@protoc_insertion_point(field_get:managarm.fs.ClientRequest.filename)
  return filename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClientRequest::set_filename(const ::std::string& value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:managarm.fs.ClientRequest.filename)
}
 void ClientRequest::set_filename(const char* value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:managarm.fs.ClientRequest.filename)
}
 void ClientRequest::set_filename(const char* value, size_t size) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:managarm.fs.ClientRequest.filename)
}
 ::std::string* ClientRequest::mutable_filename() {
  set_has_filename();
  // @@protoc_insertion_point(field_mutable:managarm.fs.ClientRequest.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ClientRequest::release_filename() {
  clear_has_filename();
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClientRequest::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    set_has_filename();
  } else {
    clear_has_filename();
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:managarm.fs.ClientRequest.filename)
}

// optional int32 flags = 3;
bool ClientRequest::has_flags() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ClientRequest::set_has_flags() {
  _has_bits_[0] |= 0x00000008u;
}
void ClientRequest::clear_has_flags() {
  _has_bits_[0] &= ~0x00000008u;
}
void ClientRequest::clear_flags() {
  flags_ = 0;
  clear_has_flags();
}
 ::google::protobuf::int32 ClientRequest::flags() const {
  // @@protoc_insertion_point(field_get:managarm.fs.ClientRequest.flags)
  return flags_;
}
 void ClientRequest::set_flags(::google::protobuf::int32 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:managarm.fs.ClientRequest.flags)
}

// optional int32 fd = 4;
bool ClientRequest::has_fd() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ClientRequest::set_has_fd() {
  _has_bits_[0] |= 0x00000010u;
}
void ClientRequest::clear_has_fd() {
  _has_bits_[0] &= ~0x00000010u;
}
void ClientRequest::clear_fd() {
  fd_ = 0;
  clear_has_fd();
}
 ::google::protobuf::int32 ClientRequest::fd() const {
  // @@protoc_insertion_point(field_get:managarm.fs.ClientRequest.fd)
  return fd_;
}
 void ClientRequest::set_fd(::google::protobuf::int32 value) {
  set_has_fd();
  fd_ = value;
  // @@protoc_insertion_point(field_set:managarm.fs.ClientRequest.fd)
}

// optional int32 size = 5;
bool ClientRequest::has_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ClientRequest::set_has_size() {
  _has_bits_[0] |= 0x00000020u;
}
void ClientRequest::clear_has_size() {
  _has_bits_[0] &= ~0x00000020u;
}
void ClientRequest::clear_size() {
  size_ = 0;
  clear_has_size();
}
 ::google::protobuf::int32 ClientRequest::size() const {
  // @@protoc_insertion_point(field_get:managarm.fs.ClientRequest.size)
  return size_;
}
 void ClientRequest::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:managarm.fs.ClientRequest.size)
}

// optional bytes buffer = 6;
bool ClientRequest::has_buffer() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ClientRequest::set_has_buffer() {
  _has_bits_[0] |= 0x00000040u;
}
void ClientRequest::clear_has_buffer() {
  _has_bits_[0] &= ~0x00000040u;
}
void ClientRequest::clear_buffer() {
  buffer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_buffer();
}
 const ::std::string& ClientRequest::buffer() const {
  // @@protoc_insertion_point(field_get:managarm.fs.ClientRequest.buffer)
  return buffer_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClientRequest::set_buffer(const ::std::string& value) {
  set_has_buffer();
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:managarm.fs.ClientRequest.buffer)
}
 void ClientRequest::set_buffer(const char* value) {
  set_has_buffer();
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:managarm.fs.ClientRequest.buffer)
}
 void ClientRequest::set_buffer(const void* value, size_t size) {
  set_has_buffer();
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:managarm.fs.ClientRequest.buffer)
}
 ::std::string* ClientRequest::mutable_buffer() {
  set_has_buffer();
  // @@protoc_insertion_point(field_mutable:managarm.fs.ClientRequest.buffer)
  return buffer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ClientRequest::release_buffer() {
  clear_has_buffer();
  return buffer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ClientRequest::set_allocated_buffer(::std::string* buffer) {
  if (buffer != NULL) {
    set_has_buffer();
  } else {
    clear_has_buffer();
  }
  buffer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buffer);
  // @@protoc_insertion_point(field_set_allocated:managarm.fs.ClientRequest.buffer)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ServerResponse::kErrorFieldNumber;
const int ServerResponse::kFdFieldNumber;
const int ServerResponse::kBufferFieldNumber;
#endif  // !_MSC_VER

ServerResponse::ServerResponse()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:managarm.fs.ServerResponse)
}

void ServerResponse::InitAsDefaultInstance() {
}

ServerResponse::ServerResponse(const ServerResponse& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:managarm.fs.ServerResponse)
}

void ServerResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  error_ = 0;
  fd_ = 0;
  buffer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerResponse::~ServerResponse() {
  // @@protoc_insertion_point(destructor:managarm.fs.ServerResponse)
  SharedDtor();
}

void ServerResponse::SharedDtor() {
  buffer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ServerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ServerResponse& ServerResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_fs_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_fs_2eproto();
#endif
  return *default_instance_;
}

ServerResponse* ServerResponse::default_instance_ = NULL;

ServerResponse* ServerResponse::New(::google::protobuf::Arena* arena) const {
  ServerResponse* n = new ServerResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerResponse::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ServerResponse*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(error_, fd_);
    if (has_buffer()) {
      buffer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ServerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:managarm.fs.ServerResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 fd = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fd_)));
          set_has_fd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_buffer;
        break;
      }

      // optional bytes buffer = 2;
      case 2: {
        if (tag == 18) {
         parse_buffer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_buffer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_error;
        break;
      }

      // optional int32 error = 3;
      case 3: {
        if (tag == 24) {
         parse_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:managarm.fs.ServerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:managarm.fs.ServerResponse)
  return false;
#undef DO_
}

void ServerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:managarm.fs.ServerResponse)
  // optional int32 fd = 1;
  if (has_fd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fd(), output);
  }

  // optional bytes buffer = 2;
  if (has_buffer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->buffer(), output);
  }

  // optional int32 error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->error(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:managarm.fs.ServerResponse)
}

int ServerResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }

    // optional int32 fd = 1;
    if (has_fd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fd());
    }

    // optional bytes buffer = 2;
    if (has_buffer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->buffer());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ServerResponse*>(&from));
}

void ServerResponse::MergeFrom(const ServerResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_fd()) {
      set_fd(from.fd());
    }
    if (from.has_buffer()) {
      set_has_buffer();
      buffer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.buffer_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ServerResponse::CopyFrom(const ServerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerResponse::IsInitialized() const {

  return true;
}

void ServerResponse::Swap(ServerResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerResponse::InternalSwap(ServerResponse* other) {
  std::swap(error_, other->error_);
  std::swap(fd_, other->fd_);
  buffer_.Swap(&other->buffer_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.swap(other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ServerResponse::GetTypeName() const {
  return "managarm.fs.ServerResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerResponse

// optional int32 error = 3;
bool ServerResponse::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ServerResponse::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
void ServerResponse::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
void ServerResponse::clear_error() {
  error_ = 0;
  clear_has_error();
}
 ::google::protobuf::int32 ServerResponse::error() const {
  // @@protoc_insertion_point(field_get:managarm.fs.ServerResponse.error)
  return error_;
}
 void ServerResponse::set_error(::google::protobuf::int32 value) {
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:managarm.fs.ServerResponse.error)
}

// optional int32 fd = 1;
bool ServerResponse::has_fd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ServerResponse::set_has_fd() {
  _has_bits_[0] |= 0x00000002u;
}
void ServerResponse::clear_has_fd() {
  _has_bits_[0] &= ~0x00000002u;
}
void ServerResponse::clear_fd() {
  fd_ = 0;
  clear_has_fd();
}
 ::google::protobuf::int32 ServerResponse::fd() const {
  // @@protoc_insertion_point(field_get:managarm.fs.ServerResponse.fd)
  return fd_;
}
 void ServerResponse::set_fd(::google::protobuf::int32 value) {
  set_has_fd();
  fd_ = value;
  // @@protoc_insertion_point(field_set:managarm.fs.ServerResponse.fd)
}

// optional bytes buffer = 2;
bool ServerResponse::has_buffer() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ServerResponse::set_has_buffer() {
  _has_bits_[0] |= 0x00000004u;
}
void ServerResponse::clear_has_buffer() {
  _has_bits_[0] &= ~0x00000004u;
}
void ServerResponse::clear_buffer() {
  buffer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_buffer();
}
 const ::std::string& ServerResponse::buffer() const {
  // @@protoc_insertion_point(field_get:managarm.fs.ServerResponse.buffer)
  return buffer_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ServerResponse::set_buffer(const ::std::string& value) {
  set_has_buffer();
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:managarm.fs.ServerResponse.buffer)
}
 void ServerResponse::set_buffer(const char* value) {
  set_has_buffer();
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:managarm.fs.ServerResponse.buffer)
}
 void ServerResponse::set_buffer(const void* value, size_t size) {
  set_has_buffer();
  buffer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:managarm.fs.ServerResponse.buffer)
}
 ::std::string* ServerResponse::mutable_buffer() {
  set_has_buffer();
  // @@protoc_insertion_point(field_mutable:managarm.fs.ServerResponse.buffer)
  return buffer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ServerResponse::release_buffer() {
  clear_has_buffer();
  return buffer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ServerResponse::set_allocated_buffer(::std::string* buffer) {
  if (buffer != NULL) {
    set_has_buffer();
  } else {
    clear_has_buffer();
  }
  buffer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), buffer);
  // @@protoc_insertion_point(field_set_allocated:managarm.fs.ServerResponse.buffer)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace fs
}  // namespace managarm

// @@protoc_insertion_point(global_scope)
