// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: keyboard.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "keyboard.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace managarm {
namespace keyboard {

void protobuf_ShutdownFile_keyboard_2eproto() {
  delete ServerReq::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_keyboard_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_keyboard_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ServerReq::default_instance_ = new ServerReq();
  ServerReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_keyboard_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_keyboard_2eproto_once_);
void protobuf_AddDesc_keyboard_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_keyboard_2eproto_once_,
                 &protobuf_AddDesc_keyboard_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_keyboard_2eproto {
  StaticDescriptorInitializer_keyboard_2eproto() {
    protobuf_AddDesc_keyboard_2eproto();
  }
} static_descriptor_initializer_keyboard_2eproto_;
#endif
bool Key_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

bool ServerReq_Action_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ServerReq_Action ServerReq::ACTION_KEY_DOWN;
const ServerReq_Action ServerReq::ACTION_KEY_PRESS;
const ServerReq_Action ServerReq::ACTION_KEY_UP;
const ServerReq_Action ServerReq::Action_MIN;
const ServerReq_Action ServerReq::Action_MAX;
const int ServerReq::Action_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ServerReq::kActionFieldNumber;
const int ServerReq::kKeyFieldNumber;
const int ServerReq::kShiftFieldNumber;
const int ServerReq::kCtrlFieldNumber;
const int ServerReq::kAltFieldNumber;
const int ServerReq::kAltGrFieldNumber;
const int ServerReq::kMetaFieldNumber;
#endif  // !_MSC_VER

ServerReq::ServerReq()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:managarm.keyboard.ServerReq)
}

void ServerReq::InitAsDefaultInstance() {
}

ServerReq::ServerReq(const ServerReq& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:managarm.keyboard.ServerReq)
}

void ServerReq::SharedCtor() {
  _cached_size_ = 0;
  action_ = 1;
  key_ = 1;
  shift_ = false;
  ctrl_ = false;
  alt_ = false;
  alt_gr_ = false;
  meta_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerReq::~ServerReq() {
  // @@protoc_insertion_point(destructor:managarm.keyboard.ServerReq)
  SharedDtor();
}

void ServerReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ServerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ServerReq& ServerReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_keyboard_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_keyboard_2eproto();
#endif
  return *default_instance_;
}

ServerReq* ServerReq::default_instance_ = NULL;

ServerReq* ServerReq::New(::google::protobuf::Arena* arena) const {
  ServerReq* n = new ServerReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerReq::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ServerReq*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(shift_, meta_);
    action_ = 1;
    key_ = 1;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool ServerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:managarm.keyboard.ServerReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .managarm.keyboard.ServerReq.Action action = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::managarm::keyboard::ServerReq_Action_IsValid(value)) {
            set_action(static_cast< ::managarm::keyboard::ServerReq_Action >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_key;
        break;
      }

      // optional .managarm.keyboard.Key key = 2;
      case 2: {
        if (tag == 16) {
         parse_key:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::managarm::keyboard::Key_IsValid(value)) {
            set_key(static_cast< ::managarm::keyboard::Key >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_shift;
        break;
      }

      // optional bool shift = 10;
      case 10: {
        if (tag == 80) {
         parse_shift:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shift_)));
          set_has_shift();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_ctrl;
        break;
      }

      // optional bool ctrl = 11;
      case 11: {
        if (tag == 88) {
         parse_ctrl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ctrl_)));
          set_has_ctrl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_alt;
        break;
      }

      // optional bool alt = 12;
      case 12: {
        if (tag == 96) {
         parse_alt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &alt_)));
          set_has_alt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_alt_gr;
        break;
      }

      // optional bool alt_gr = 13;
      case 13: {
        if (tag == 104) {
         parse_alt_gr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &alt_gr_)));
          set_has_alt_gr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_meta;
        break;
      }

      // optional bool meta = 14;
      case 14: {
        if (tag == 112) {
         parse_meta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &meta_)));
          set_has_meta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:managarm.keyboard.ServerReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:managarm.keyboard.ServerReq)
  return false;
#undef DO_
}

void ServerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:managarm.keyboard.ServerReq)
  // optional .managarm.keyboard.ServerReq.Action action = 1;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->action(), output);
  }

  // optional .managarm.keyboard.Key key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->key(), output);
  }

  // optional bool shift = 10;
  if (has_shift()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->shift(), output);
  }

  // optional bool ctrl = 11;
  if (has_ctrl()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->ctrl(), output);
  }

  // optional bool alt = 12;
  if (has_alt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->alt(), output);
  }

  // optional bool alt_gr = 13;
  if (has_alt_gr()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->alt_gr(), output);
  }

  // optional bool meta = 14;
  if (has_meta()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->meta(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:managarm.keyboard.ServerReq)
}

int ServerReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 127u) {
    // optional .managarm.keyboard.ServerReq.Action action = 1;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

    // optional .managarm.keyboard.Key key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->key());
    }

    // optional bool shift = 10;
    if (has_shift()) {
      total_size += 1 + 1;
    }

    // optional bool ctrl = 11;
    if (has_ctrl()) {
      total_size += 1 + 1;
    }

    // optional bool alt = 12;
    if (has_alt()) {
      total_size += 1 + 1;
    }

    // optional bool alt_gr = 13;
    if (has_alt_gr()) {
      total_size += 1 + 1;
    }

    // optional bool meta = 14;
    if (has_meta()) {
      total_size += 1 + 1;
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ServerReq*>(&from));
}

void ServerReq::MergeFrom(const ServerReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_shift()) {
      set_shift(from.shift());
    }
    if (from.has_ctrl()) {
      set_ctrl(from.ctrl());
    }
    if (from.has_alt()) {
      set_alt(from.alt());
    }
    if (from.has_alt_gr()) {
      set_alt_gr(from.alt_gr());
    }
    if (from.has_meta()) {
      set_meta(from.meta());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void ServerReq::CopyFrom(const ServerReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerReq::IsInitialized() const {

  return true;
}

void ServerReq::Swap(ServerReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerReq::InternalSwap(ServerReq* other) {
  std::swap(action_, other->action_);
  std::swap(key_, other->key_);
  std::swap(shift_, other->shift_);
  std::swap(ctrl_, other->ctrl_);
  std::swap(alt_, other->alt_);
  std::swap(alt_gr_, other->alt_gr_);
  std::swap(meta_, other->meta_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.swap(other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ServerReq::GetTypeName() const {
  return "managarm.keyboard.ServerReq";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerReq

// optional .managarm.keyboard.ServerReq.Action action = 1;
bool ServerReq::has_action() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ServerReq::set_has_action() {
  _has_bits_[0] |= 0x00000001u;
}
void ServerReq::clear_has_action() {
  _has_bits_[0] &= ~0x00000001u;
}
void ServerReq::clear_action() {
  action_ = 1;
  clear_has_action();
}
 ::managarm::keyboard::ServerReq_Action ServerReq::action() const {
  // @@protoc_insertion_point(field_get:managarm.keyboard.ServerReq.action)
  return static_cast< ::managarm::keyboard::ServerReq_Action >(action_);
}
 void ServerReq::set_action(::managarm::keyboard::ServerReq_Action value) {
  assert(::managarm::keyboard::ServerReq_Action_IsValid(value));
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:managarm.keyboard.ServerReq.action)
}

// optional .managarm.keyboard.Key key = 2;
bool ServerReq::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ServerReq::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
void ServerReq::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
void ServerReq::clear_key() {
  key_ = 1;
  clear_has_key();
}
 ::managarm::keyboard::Key ServerReq::key() const {
  // @@protoc_insertion_point(field_get:managarm.keyboard.ServerReq.key)
  return static_cast< ::managarm::keyboard::Key >(key_);
}
 void ServerReq::set_key(::managarm::keyboard::Key value) {
  assert(::managarm::keyboard::Key_IsValid(value));
  set_has_key();
  key_ = value;
  // @@protoc_insertion_point(field_set:managarm.keyboard.ServerReq.key)
}

// optional bool shift = 10;
bool ServerReq::has_shift() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ServerReq::set_has_shift() {
  _has_bits_[0] |= 0x00000004u;
}
void ServerReq::clear_has_shift() {
  _has_bits_[0] &= ~0x00000004u;
}
void ServerReq::clear_shift() {
  shift_ = false;
  clear_has_shift();
}
 bool ServerReq::shift() const {
  // @@protoc_insertion_point(field_get:managarm.keyboard.ServerReq.shift)
  return shift_;
}
 void ServerReq::set_shift(bool value) {
  set_has_shift();
  shift_ = value;
  // @@protoc_insertion_point(field_set:managarm.keyboard.ServerReq.shift)
}

// optional bool ctrl = 11;
bool ServerReq::has_ctrl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ServerReq::set_has_ctrl() {
  _has_bits_[0] |= 0x00000008u;
}
void ServerReq::clear_has_ctrl() {
  _has_bits_[0] &= ~0x00000008u;
}
void ServerReq::clear_ctrl() {
  ctrl_ = false;
  clear_has_ctrl();
}
 bool ServerReq::ctrl() const {
  // @@protoc_insertion_point(field_get:managarm.keyboard.ServerReq.ctrl)
  return ctrl_;
}
 void ServerReq::set_ctrl(bool value) {
  set_has_ctrl();
  ctrl_ = value;
  // @@protoc_insertion_point(field_set:managarm.keyboard.ServerReq.ctrl)
}

// optional bool alt = 12;
bool ServerReq::has_alt() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ServerReq::set_has_alt() {
  _has_bits_[0] |= 0x00000010u;
}
void ServerReq::clear_has_alt() {
  _has_bits_[0] &= ~0x00000010u;
}
void ServerReq::clear_alt() {
  alt_ = false;
  clear_has_alt();
}
 bool ServerReq::alt() const {
  // @@protoc_insertion_point(field_get:managarm.keyboard.ServerReq.alt)
  return alt_;
}
 void ServerReq::set_alt(bool value) {
  set_has_alt();
  alt_ = value;
  // @@protoc_insertion_point(field_set:managarm.keyboard.ServerReq.alt)
}

// optional bool alt_gr = 13;
bool ServerReq::has_alt_gr() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ServerReq::set_has_alt_gr() {
  _has_bits_[0] |= 0x00000020u;
}
void ServerReq::clear_has_alt_gr() {
  _has_bits_[0] &= ~0x00000020u;
}
void ServerReq::clear_alt_gr() {
  alt_gr_ = false;
  clear_has_alt_gr();
}
 bool ServerReq::alt_gr() const {
  // @@protoc_insertion_point(field_get:managarm.keyboard.ServerReq.alt_gr)
  return alt_gr_;
}
 void ServerReq::set_alt_gr(bool value) {
  set_has_alt_gr();
  alt_gr_ = value;
  // @@protoc_insertion_point(field_set:managarm.keyboard.ServerReq.alt_gr)
}

// optional bool meta = 14;
bool ServerReq::has_meta() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ServerReq::set_has_meta() {
  _has_bits_[0] |= 0x00000040u;
}
void ServerReq::clear_has_meta() {
  _has_bits_[0] &= ~0x00000040u;
}
void ServerReq::clear_meta() {
  meta_ = false;
  clear_has_meta();
}
 bool ServerReq::meta() const {
  // @@protoc_insertion_point(field_get:managarm.keyboard.ServerReq.meta)
  return meta_;
}
 void ServerReq::set_meta(bool value) {
  set_has_meta();
  meta_ = value;
  // @@protoc_insertion_point(field_set:managarm.keyboard.ServerReq.meta)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace keyboard
}  // namespace managarm

// @@protoc_insertion_point(global_scope)
