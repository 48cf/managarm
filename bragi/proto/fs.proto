
syntax = "proto2";
package managarm.fs;
option optimize_for = LITE_RUNTIME;

enum Errors {
	SUCCESS = 0;
	ILLEGAL_REQUEST = 3;
	FILE_NOT_FOUND = 1;
	END_OF_FILE = 2;
	ILLEGAL_ARGUMENT = 4;
}

enum FileType {
	REGULAR = 1;
	DIRECTORY = 2;
	SYMLINK = 3;
	SOCKET = 4;
}

enum Command {
	TTY_GET_ATTR = 1;
	TTY_SET_ATTR = 2;
}

enum CntReqType {
	NONE = 0;

	// Device API.
	DEV_MOUNT = 11;
	DEV_OPEN = 14;

	// File node API.
	NODE_GET_LINK = 12;
	NODE_OPEN = 13;
	NODE_READ_SYMLINK = 15;

	// File passthrough API.
	// TODO: Add a PT_ prefix to those requests.
	READ = 2;
	PT_READ_ENTRIES = 16;

	WRITE = 3;
	SEEK_ABS = 6;
	SEEK_REL = 7;
	SEEK_EOF = 8;

	PT_IOCTL = 17;

	// Legacy API.
	FSTAT = 5;
	OPEN = 1;
	CONNECT = 10;
	MMAP = 9;
	CLOSE = 4;
}

message CntRequest {
	optional CntReqType req_type = 1;

	// used by OPEN_ENTRY
	optional string path = 2;

	// used by FSTAT, READ, WRITE, SEEK_ABS, SEEK_REL, SEEK_EOF, MMAP and CLOSE
	optional int32 fd = 4;

	// used by READ and WRITE
	optional int32 size = 5;
	optional bytes buffer = 6;

	// used by SEEK_ABS, SEEK_REL and SEEK_EOF
	optional int64 rel_offset = 7;

	// used by PT_IOCTL.
	optional int64 command = 8;
	
	// drm
	optional uint64 drm_capability = 18;
}

message SvrResponse {
	optional int32 error = 3;
	
	// used by PT_READ_ENTRIES
	optional string path = 19;
	
	// returned by FSTAT and OPEN
	optional FileType file_type = 5;
	
	// returned by NODE_GET_LINK
	optional int64 id = 18;

	// returned by FSTAT
	optional uint64 file_size = 4;
	
	// returned by FSTAT
	optional int32 mode = 13;
	
	// returned by FSTAT
	optional uint64 inode_num = 14;
	
	// returned by FSTAT
	optional uint64 num_links = 17;
	
	// returned by FSTAT
	optional int64 uid = 15;
	optional int64 gid = 16;

	// returned by FSTAT
	optional int64 atime_secs = 7;
	optional int64 atime_nanos = 8;
	optional int64 mtime_secs = 9;
	optional int64 mtime_nanos = 10;
	optional int64 ctime_secs = 11;
	optional int64 ctime_nanos = 12;

	// returned by OPEN
	optional int32 fd = 1;

	// returned by SEEK_ABS, SEEK_REL and SEEK_EOF
	optional uint64 offset = 6;
	
	// returned by PT_IOCTL
	optional uint64 result = 20;

	// drm
	optional uint64 drm_value = 21;
}

